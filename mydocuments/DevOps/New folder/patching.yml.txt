[root@master ansible]# cat patching.yml
---
- hosts: myservers
  user: ansible
  become: yes
  become_method: sudo
#  serial: 1
  tasks:
  - name: 1. Verify applicaions process are not running
    shell: if ps -eaf | egrep 'apache|http'|grep -v grep > /dev/null ;then echo 'process_running';else echo 'process_not_running';fi
    ignore_errors: true
    register: app_process_check
  - name: 2. decision point to start patching
    fail: msg="{{ inventory_hostname }} have running Application. Please stop the apps then attempt patching."
    when: app_process_check.stdout == "process_running"
  - name: 3. upgrade all packages on the Server
    yum:
     name="kernel"
     state=latest
    when: app_process_check.stdout == "process_not_running" and ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    register: yum_update
  - name: 4. check if reboot required afer Kernel Update.
    shell: KERNEL_NEW=$(rpm -q --last kernel |head -1 |awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboo_not_needed"; fi
    ignore_errors: true
    register: reboot_required
  - name: 5. restart system
    command: shutdown -r +1 "Rebooting System After Patching"
    async: 0
    poll: 0
    when: reboot_required.stdout == "reboot_needed"
    register: reboot_started
    ignore_errors: true
  - name: 6. pause for 180 secs
    pause:
     minutes: 3
  - name: 7. Wait for connection to resume
    wait_for_connection:
     timeout: 30
    when: reboot_started
#
#  - name: check if system responding to ssh
#    local_action:
#      module: wait_for
#       host={{ inventory_hostname }}
#       port=22
#       delay=15
#       timeout=300
#       state=started
#    when: reboot_started|changed


